{"version":3,"sources":["components/SearchBox/SearchBox.js","components/Item/Item.js","components/ItemList/ItemList.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitHandler","event","preventDefault","props","searchHandler","state","searchInput","inputHandler","setState","target","value","bind","assertThisInitialized","document","getElementById","addEventListener","keyCode","click","react_default","a","createElement","onSubmit","className","id","type","onChange","lib_default","name","style","color","React","Component","Item","_ref","item","favourited","onClick","role","title","dangerouslySetInnerHTML","__html","body","replace","ItemList","isFavourited","ie","c","favouriteList","length","_this2","_this$props","items","map","i","components_Item_Item","key","App","onSearchClick","val","searchField","toggleFavourite","found","newList","splice","push","itemList","fetch","then","response","json","_this$state","filteredItems","filter","keywords","toLowerCase","includes","components_SearchBox_SearchBox","components_ItemList_ItemList","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c26ea141.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBox.css';\nimport FontAwesome from 'react-fontawesome';\n\nclass SearchBox extends React.Component {\n\tconstructor() {\n\n\t\t// call super\n\t\tsuper();\n\n\t\t// bind handlers to be passed as callbacks\n\t\tthis.submitHandler = this.submitHandler.bind(this);\n\t\tthis.inputHandler = this.inputHandler.bind(this);\n\n\t\t// state\n\t\tthis.state = {\n\t\t\tsearchInput: ''\n\t\t}\n\t}\n\n\t// add 'enter' event listener to form when component is mounted (added to tree)\n\tcomponentDidMount() {\n\t\t// add 'enter' key listener to form\n\t\tdocument.getElementById('searchInputField').addEventListener('keyup', event => {\n\n\t\t\t// prevent default action\n\t\t\tevent.preventDefault();\n\n\t\t\t// keyCode 13 === enter key\n\t\t\tif(event.keyCode === 13) {\n\n\t\t\t\t// \"click\" the submit button\n\t\t\t\tdocument.getElementById('searchInputBtn').click();\n\t\t\t}\n\n\t\t});\n\t}\n\n\t// handles form submission\n\tsubmitHandler = event => {\n\n\t\t// prevent default action\n\t\tevent.preventDefault();\n\n\t\t// passes searchInput to parent searchHandler\n\t\tthis.props.searchHandler(this.state.searchInput);\n\t}\n\n\t// handles searchInputField value changes\n\tinputHandler = event => {\n\n\t\t// update current searchInput state\n\t\tthis.setState({ searchInput: event.target.value })\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<form onSubmit={ this.submitHandler } className=\"searchbox\">\n\t\t\t\t<input \n\t\t\t\t\tid='searchInputField'\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={ this.state.searchInput }\n\t\t\t\t\tonChange={ this.inputHandler }\n\t\t\t\t/>\n\t\t\t\t<button id='searchInputBtn' type=\"submit\" ><FontAwesome \n\t\t\t\t\t\t\t\tname='fas fa-search' \n\t\t\t\t\t\t\t\tstyle={{ color: '#fff' }}\n\t\t\t\t\t\t\t/> </button>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default SearchBox;","import React from 'react';\nimport FontAwesome from 'react-fontawesome';\nimport './Item.css';\n\nconst Item = ({ item, favourited, onClick }) => {\n\treturn(\n\t\t<div className=\"item\">\n\t\t\t<h3>\n\t\t\t\t<span\n\t\t\t\t\tclassName='push-right'\n\t\t\t\t\tonClick={ () => onClick(item) }\n\t\t\t\t\trole='img'\n\t\t\t\t>\n\t\t\t\t\t{\n\t\t\t\t\t\t// green star if favourited, grey if not\n\t\t\t\t\t\tfavourited \n\t\t\t\t\t\t\t? <FontAwesome \n\t\t\t\t\t\t\t\tname='star' \n\t\t\t\t\t\t\t\tstyle={{ color: '#28955D' }}\n\t\t\t\t\t\t\t/> \n\t\t\t\t\t\t\t: <FontAwesome \n\t\t\t\t\t\t\t\tname='star' \n\t\t\t\t\t\t\t\tstyle={{ color: '#A8A8A8' }}\n\t\t\t\t\t\t\t/> \n\t\t\t\t\t}\n\t\t\t\t</span>\n\t\t\t\t{ item.title }\n\t\t\t</h3>\n\t\t\t<div id=\"item-body\" dangerouslySetInnerHTML={{ __html: item.body.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;nbsp;/g, ' ') }}></div>\n\t\t</div>\n\t);\t\n}\n\nexport default Item;\n","import React from 'react';\nimport Item from '../Item/Item';\nimport './ItemList.css';\n\nclass ItemList extends React.Component {\n\n\t// checks if item is favourited\n\tisFavourited = (ie) => {\n\t\tfor(let c = 0; c < this.props.favouriteList.length; c++) {\n\t\t\tif(this.props.favouriteList[c].title === ie.title) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\trender() {\n\t\t// destructure items and onClick\n\t\tconst { items, onClick } = this.props;\n\t\treturn(\n\t\t\t<div className=\"item-list\">\n\t\t\t\t{\n\t\t\t\t\t// create each item in itemList\n\t\t\t\t\titems.map((item, i) => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t<Item \n\t\t\t\t\t\t\t\tkey={ i }\n\t\t\t\t\t\t\t\titem={ item }\n\t\t\t\t\t\t\t\tfavourited={ this.isFavourited(item) }\n\t\t\t\t\t\t\t\tonClick={ onClick }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ItemList;\n","import React, { Component } from 'react';\nimport SearchBox from '../components/SearchBox/SearchBox';\nimport ItemList from '../components/ItemList/ItemList';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\t// bind onSearchClick\n\t\tthis.onSearchClick = this.onSearchClick.bind(this);\n\n\t\t// state\n\t\tthis.state = {\n\t\t\titemList: [],\n\t\t\tfavouriteList: [],\n\t\t\tsearchField: '', \n\t\t}\n\t}\n\n\t// fetch data when App is mounted (added to tree)\n\tcomponentDidMount() {\n\n\t\t// populate itemList when promise is resolved\n\t\tfetch('https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000')\n\t\t   .then( response => response.json() )\n\t\t   .then( items => this.setState({ itemList: items }) );\n\t}\n\n\t// sets searchField on search form submit\n\tonSearchClick = val => {\n\t\tthis.setState({ searchField: val });\n\t}\n\n\t// toggles item on favourites list\n\ttoggleFavourite = item => {\n\t\tlet found = false;\n\t\tlet newList = this.state.favouriteList;\n\t\tlet c = 0;\n\n\t\t// loop while the item is not found in the favourites list\n\t\twhile(!found && c < newList.length) {\n\n\t\t\t// if item is found, remove it from the favourites list\n\t\t\tif(this.state.favouriteList[c].title === item.title) {\n\t\t\t\tfound = true;\n\t\t\t\tnewList.splice(c, 1);\n\t\t\t}\n\t\t\tc++;\n\t\t}\n\n\t\t// if item was never found in favourites list, add it to the favourites list\n\t\tif(!found) {\n\t\t\tnewList.push(item);\n\t\t}\n\n\t\t// set newList as new favourites list state\n\t\tthis.setState(newList);\n\t}\n\n  \trender() {\n  \t\t// destructure itemList and searchField\n\t\tconst { itemList, favouriteList, searchField } = this.state;\n\t\tlet filteredItems = [];\n\t\t\n\t\t// only populate filteredItems list if searchfield is not empty\n\t\tif(searchField.length) {\n\n\t\t\t// find items that contain the matching keyword\n\t\t\tfilteredItems = itemList.filter(item => {\n\t\t\t\treturn item.keywords.toLowerCase().includes(searchField.toLowerCase());\n\t\t\t});\n\t\t}\n\n\t\t// show loading screen if data is not finished loading\n\t\tif(!itemList.length) {\n\t\t\treturn (<h1 className='center'>Loading...</h1>);\n\n\t\t// does not show favourites list if there is 1 or 0 items in it\n\t\t} else if(favouriteList.length <= 1) {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t        \t<h1 className='banner center'>Toronto Waste Lookup</h1>\n\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<SearchBox searchHandler={ this.onSearchClick } />\n\n\t\t\t\t\t\t<ItemList \n\t\t\t\t\t\t\titems={ filteredItems } \n\t\t\t\t\t\t\tfavouriteList={ favouriteList }\n\t\t\t\t\t\t\tonClick={ this.toggleFavourite }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t      \t</div>// /App\n\t\t\t);\n\t\t\t\n\t\t// otherwise return app with favourites list\n\t\t} else {\n\t\t\treturn(\n\t\t\t\t<div className=\"App\">\n\t\t        \t<h1 className='banner center'>Toronto Waste Lookup</h1>\n\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<SearchBox className='search-box' searchHandler={ this.onSearchClick } />\n\n\t\t\t\t\t\t<ItemList \n\t\t\t\t\t\t\titems={ filteredItems } \n\t\t\t\t\t\t\tfavouriteList={ favouriteList }\n\t\t\t\t\t\t\tonClick={ this.toggleFavourite }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<h1 className='ugh-header' >Favourites</h1>\n\t\t\t        \t<ItemList \n\t\t\t\t\t\t\titems={ favouriteList } \n\t\t\t\t\t\t\tfavouriteList={ favouriteList }\n\t\t\t\t\t\t\tonClick={ this.toggleFavourite }\n\t\t\t\t\t\t/> \n\t\t\t\t\t</div>\n\t\t      \t</div>// /App\n\t\t\t)\n\t\t}\n  \t}\n}\n\nexport default App;\n\n// fetch('https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000')\n//    .then( response => response.json() )\n//    .then( data => console.log(data) )\n\n// https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}